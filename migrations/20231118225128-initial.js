module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.sequelize.transaction(async (transaction) => {
    await queryInterface.createTable('alunos', {"id":{"type":Sequelize.DataTypes.INTEGER,"allowNull":false,"primaryKey":true,"autoIncrement":true,"field":"id"},"nome":{"type":Sequelize.DataTypes.STRING({"length":255}),"allowNull":false,"field":"nome"},"email":{"type":Sequelize.DataTypes.STRING,"field":"email"},"created_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"created_at"},"updated_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"updated_at"}}, {transaction});await queryInterface.createTable('cursos', {"id":{"type":Sequelize.DataTypes.INTEGER,"allowNull":false,"primaryKey":true,"autoIncrement":true,"field":"id"},"nome":{"type":Sequelize.DataTypes.STRING({"length":255}),"allowNull":false,"field":"nome"},"created_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"created_at"},"updated_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"updated_at"},"professor_id":{"type":Sequelize.DataTypes.INTEGER,"field":"professor_id"},"sala_id":{"type":Sequelize.DataTypes.INTEGER,"field":"sala_id"}}, {transaction});await queryInterface.createTable('departamentos', {"id":{"type":Sequelize.DataTypes.INTEGER,"allowNull":false,"primaryKey":true,"autoIncrement":true,"field":"id"},"nome":{"type":Sequelize.DataTypes.STRING({"length":255}),"allowNull":false,"field":"nome"},"created_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"created_at"},"updated_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"updated_at"}}, {transaction});await queryInterface.createTable('matriculas', {"id":{"type":Sequelize.DataTypes.INTEGER,"allowNull":false,"primaryKey":true,"autoIncrement":true,"field":"id"},"created_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"created_at"},"updated_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"updated_at"},"aluno_id":{"type":Sequelize.DataTypes.INTEGER,"field":"aluno_id"},"curso_id":{"type":Sequelize.DataTypes.INTEGER,"field":"curso_id"}}, {transaction});await queryInterface.createTable('professors', {"id":{"type":Sequelize.DataTypes.INTEGER,"allowNull":false,"primaryKey":true,"autoIncrement":true,"field":"id"},"nome":{"type":Sequelize.DataTypes.STRING({"length":255}),"allowNull":false,"field":"nome"},"created_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"created_at"},"updated_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"updated_at"},"departamento_id":{"type":Sequelize.DataTypes.INTEGER,"field":"departamento_id"}}, {transaction});await queryInterface.createTable('salas', {"id":{"type":Sequelize.DataTypes.INTEGER,"allowNull":false,"primaryKey":true,"autoIncrement":true,"field":"id"},"numero":{"type":Sequelize.DataTypes.STRING({"length":255}),"allowNull":false,"field":"numero"},"capacidade":{"type":Sequelize.DataTypes.INTEGER,"allowNull":false,"field":"capacidade"},"created_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"created_at"},"updated_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"updated_at"}}, {transaction});await queryInterface.createTable('users', {"id":{"type":Sequelize.DataTypes.INTEGER,"allowNull":false,"primaryKey":true,"autoIncrement":true,"field":"id"},"name":{"type":Sequelize.DataTypes.STRING,"allowNull":false,"field":"name"},"email":{"type":Sequelize.DataTypes.STRING,"allowNull":false,"field":"email"},"password":{"type":Sequelize.DataTypes.STRING,"allowNull":false,"field":"password"},"created_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"created_at"},"updated_at":{"type":Sequelize.DataTypes.DATE,"allowNull":false,"field":"updated_at"}}, {transaction});
    })
    await queryInterface.sequelize.transaction(async (transaction) => {
    await queryInterface.addConstraint('cursos', {"fields":["professor_id"],"type":"foreign key","name":"cursos_professor_id_fkey","references":{"table":"professors","field":"id"},"onDelete":"SET NULL","onUpdate":"CASCADE"}, {transaction});await queryInterface.addConstraint('cursos', {"fields":["sala_id"],"type":"foreign key","name":"cursos_sala_id_fkey","references":{"table":"salas","field":"id"},"onDelete":"SET NULL","onUpdate":"CASCADE"}, {transaction});await queryInterface.addConstraint('matriculas', {"fields":["aluno_id"],"type":"foreign key","name":"matriculas_aluno_id_fkey","references":{"table":"alunos","field":"id"},"onDelete":"SET NULL","onUpdate":"CASCADE"}, {transaction});await queryInterface.addConstraint('matriculas', {"fields":["curso_id"],"type":"foreign key","name":"matriculas_curso_id_fkey","references":{"table":"cursos","field":"id"},"onDelete":"SET NULL","onUpdate":"CASCADE"}, {transaction});await queryInterface.addConstraint('professors', {"fields":["departamento_id"],"type":"foreign key","name":"professors_departamento_id_fkey","references":{"table":"departamentos","field":"id"},"onDelete":"SET NULL","onUpdate":"CASCADE"}, {transaction});
    })
    await queryInterface.sequelize.transaction(async (transaction) => {
    
    })
  },down: async (queryInterface, Sequelize) => {
    await queryInterface.sequelize.transaction(async (transaction) => {
    await queryInterface.removeConstraint('cursos', 'cursos_professor_id_fkey', {transaction});await queryInterface.removeConstraint('cursos', 'cursos_sala_id_fkey', {transaction});await queryInterface.removeConstraint('matriculas', 'matriculas_aluno_id_fkey', {transaction});await queryInterface.removeConstraint('matriculas', 'matriculas_curso_id_fkey', {transaction});await queryInterface.removeConstraint('professors', 'professors_departamento_id_fkey', {transaction});
    })
    await queryInterface.sequelize.transaction(async (transaction) => {
    await queryInterface.dropTable('alunos', {transaction});await queryInterface.dropTable('cursos', {transaction});await queryInterface.dropTable('departamentos', {transaction});await queryInterface.dropTable('matriculas', {transaction});await queryInterface.dropTable('professors', {transaction});await queryInterface.dropTable('salas', {transaction});await queryInterface.dropTable('users', {transaction});
    })
    await queryInterface.sequelize.transaction(async (transaction) => {
    
    })
  },
};